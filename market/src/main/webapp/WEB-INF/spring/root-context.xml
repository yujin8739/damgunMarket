<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- 
		root-context : 서버구동과 동시에 web.xml을 거쳐서 읽혀지는 문서로 서버 구동과 동시에 세팅해야하는
					   준비요소들이 있다면 작성해둔다. 주로 DB연결,트랜잭션처리,모듈 연결등을 작성한다.
	 -->
	 
	 <!-- 
	 	BasicDataSource bds = new BasicDataSource();
	 	m.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
	 	
	 	SqlSessionFactoryBean sfb = new SqlSessionFactoryBean();
	 	SqlSessionTemplate st = new SqlSessionTemplate(sfb);
	 	sfb.setDataSource(bds) 
	 	
	 	
	  -->
	 
	 <!-- DB 등록작업 3단계-->
	 
	 <!-- 1단계 DB접속 정보 등록 -->
	 <bean class="org.apache.commons.dbcp2.BasicDataSource" id="dataSource">
	 	<property name="driverClassName" value="oracle.jdbc.OracleDriver"/>
	 	<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
	 	<property name="username" value="DAMGEUN"/>
	 	<property name="password" value="DAMGEUN"/>
	 </bean>
		
	<!-- 2단계 : mybatis에서 제공하는 sql명령어 실행을 위한 도구 등록 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<!-- 위에서 만든 db접속정보와 mybatis관련 설정 및 매퍼파일 위치 지정 -->
		<property name="dataSource" ref="dataSource"/> <!-- db접속정보연결 -->
		<!-- configLocation : config 파일 위치 / classpath : classes 폴더 최상단 경로  -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- mapperLocations : mapper파일 위치 / *-mapper : *전체 와일드카드  -->
		<property name="mapperLocations" value="classpath:mappers/*-mapper.xml"/>
	</bean>
	
	
	<!-- 3단계 : sqlSessionFactory를 이용하여 sqlSessionTemplate 도구 등록(sqlSession) -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<!-- sqlSessionFactory 넣어주기 -->
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	
	
	<!-- 
		트랜잭션 사용 설정 
		@Transactional 어노테이션 활성화 작업
		트랜잭션 매니저 도구 등록하기
	 -->
	 <tx:annotation-driven/>
	 
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<property name="dataSource" ref="dataSource"/>
	 </bean>
		
	<!-- 
		root-context에서 필요한 component들을 활성화 시키기 위해서 
		base-package 설정 및 필요한 어노테이션을 별도로 등록하기
		servlet-context보다 빠른 시점에 등록된다.
		root-context와 servlet-context에서 중복으로 등록되는 component들을 중복 되지 않도록 지정 처리하기
		
		@Service,@Repository어노테이션(컴포넌트)은 root-context에서 스캔
		use-default-filters : 기본 스캔 설정(@Component,@Controller,@Service,...)를 할지 여부 (true/false)
	 	
	 	특정 컴포넌트만 지정하기 : include 
	 	특정 컴포넌트 제외하기 : exclude
	 -->
	
	<!-- root-context에서는 비지니스 로직 처리를 위한 컴포넌트들 등록 -->
	<context:component-scan base-package="com.kh.soak" use-default-filters="false" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>
		
		
</beans>