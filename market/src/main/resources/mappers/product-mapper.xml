<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 비어있을 수 없음 필수입력 요소 (해당 mapper를 부르는 별칭) -->
<mapper namespace="productMapper">
	<!-- 조회 결과를 VO에 매핑 시키는 도구 resultMap 작성해보기 -->
	<resultMap type="Product" id="productResultMap">
		<result property="userNo" column="USER_NO" />
		<result property="pdNum" column="PD_NUM" />
		<result property="pdTitle" column="PD_TITLE" />
		<result property="pdBoard" column="PD_BOARD" />
		<result property="pdPrice" column="PD_PRICE" />
		<result property="latitude" column="LATITUDE" />
		<result property="longitude" column="LONGITUDE" />
		<result property="bigCate" column="BIG_CATE" />
		<result property="midCate" column="MID_CATE" />
		<result property="smallCate" column="SMALL_CATE" />
		<result property="updateTime" column="UPDATE_TIME" />
		<result property="pdRank" column="PD_RANK" />
		<result property="pdStatus" column="PD_STATUS" />
		<result property="isSub" column="IS_SUB" />
	</resultMap>
	
	<update id="upDateStatus">
		UPDATE PRODUCT
		SET PD_STATUS = 'DONE'
		WHERE USER_NO = #{userNo}
	</update>
	
	<!--
		상품 수정 쿼리 (김진우 작성 추가)
		DB에서 상품을 수정하는 쿼리
		PdNum과 UserNo를 조건으로 걸어서 본인이 올린 상품만 수정할 수 있게 제약
	-->
	<update id="updateProductByPdNumUserNo" parameterType="Product">
	    UPDATE PRODUCT
	    SET
	        PD_TITLE = #{pdTitle},
	        PD_BOARD = #{pdBoard},
	        PD_PRICE = #{pdPrice},
	        BIG_CATE = #{bigCate},
	        MID_CATE = #{midCate},
	        SMALL_CATE = #{smallCate}
	    WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo}
	</update>
	
	<!-- 전체 상품 조회 -->
	<select id="selectAllProducts" resultMap="productResultMap" resultType="Product">
	   SELECT 
	        p.USER_NO,
	        p.PD_NUM,
	        p.PD_TITLE,
	        p.PD_BOARD,
	        p.PD_PRICE,
	        p.LATITUDE,
	        p.LONGITUDE,
	        p.BIG_CATE,
	        p.MID_CATE,
	        p.SMALL_CATE,
	        p.UPDATE_TIME,
	        p.PD_RANK,
	        p.PD_STATUS,
	        p.IS_SUB,
	        pd.pd_url
	    FROM Product p
	    LEFT JOIN pd_file pd 
	        ON p.user_no = pd.user_no 
	        AND p.pd_num = pd.pd_num
	    WHERE (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL)
	      AND EXISTS (
	        SELECT 1
	        FROM TRADE_STATION ts
	        WHERE ts.USER_NO = p.USER_NO
	          AND ts.PD_NUM = p.PD_NUM
	          AND ts.STATION_NUM IN (
	              SELECT s2.STATION_NUM
	              FROM STATION s2
	              WHERE s2.LINE_NAME = (
	                  SELECT LINE_NAME FROM (
	                      SELECT s.LINE_NAME
	                      FROM STATION s
	                      ORDER BY POWER(s.LATITUDE - #{latitude}, 2) + POWER(s.LONGITDE - #{longitude}, 2)
	                  ) WHERE ROWNUM = 1
	              )
	          )
	    )
	    ORDER BY (p.UPDATE_TIME - NUMTODSINTERVAL(p.PD_RANK, 'DAY')) DESC
	</select>
	
	<!-- 키워드 검색 -->
	<select id="selectProducts" resultMap="productResultMap" resultType="Product">
	    SELECT 
		    p.USER_NO,
		    p.PD_NUM,
		    p.PD_TITLE,
		    p.PD_BOARD,
		    p.PD_PRICE,
		    p.LATITUDE,
		    p.LONGITUDE,
		    p.BIG_CATE,
		    p.MID_CATE,
		    p.SMALL_CATE,
		    p.UPDATE_TIME,
		    p.PD_RANK,
		    p.PD_STATUS,
		    p.IS_SUB,
		    pd.pd_url
		FROM Product p
		LEFT JOIN pd_file pd 
		    ON p.user_no = pd.user_no 
		    AND p.pd_num = pd.pd_num
		WHERE (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL)
		  AND (p.PD_TITLE LIKE '%' || #{keyword, jdbcType=VARCHAR} || '%' 
		       OR p.PD_BOARD LIKE '%' || #{keyword, jdbcType=VARCHAR} || '%')
		  AND EXISTS (
		      SELECT 1
		      FROM TRADE_STATION ts
		      WHERE ts.USER_NO = p.USER_NO
		        AND ts.PD_NUM = p.PD_NUM
		        AND ts.STATION_NUM IN (
		            SELECT s2.STATION_NUM
		            FROM STATION s2
		            WHERE s2.LINE_NAME = (
		                SELECT LINE_NAME FROM (
		                    SELECT s.LINE_NAME
		                    FROM STATION s
		                    ORDER BY POWER(s.LATITUDE - #{latitude}, 2) + POWER(s.LONGITDE - #{longitude}, 2)
		                ) WHERE ROWNUM = 1
		            )
		        )
		  )
		ORDER BY (p.UPDATE_TIME - NUMTODSINTERVAL(p.PD_RANK, 'DAY')) DESC
	</select>
	
	<!-- 카테고리 검색 -->
	<select id="searchCategory" resultMap="productResultMap" resultType="Product">
	    SELECT 
		    p.USER_NO,
		    p.PD_NUM,
		    p.PD_TITLE,
		    p.PD_BOARD,
		    p.PD_PRICE,
		    p.LATITUDE,
		    p.LONGITUDE,
		    p.BIG_CATE,
		    p.MID_CATE,
		    p.SMALL_CATE,
		    p.UPDATE_TIME,
		    p.PD_RANK,
		    p.PD_STATUS,
		    p.IS_SUB,
		    pd.pd_url
		FROM Product p
		LEFT JOIN pd_file pd 
		    ON p.user_no = pd.user_no 
		    AND p.pd_num = pd.pd_num
		WHERE (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL)
		  AND (p.BIG_CATE LIKE '%' || #{category, jdbcType=VARCHAR} || '%'
		       OR p.MID_CATE LIKE '%' || #{category, jdbcType=VARCHAR} || '%'
		       OR p.SMALL_CATE LIKE '%' || #{category, jdbcType=VARCHAR} || '%')
		  AND EXISTS (
		      SELECT 1
		      FROM TRADE_STATION ts
		      WHERE ts.USER_NO = p.USER_NO
		        AND ts.PD_NUM = p.PD_NUM
		        AND ts.STATION_NUM IN (
		            SELECT s2.STATION_NUM
		            FROM STATION s2
		            WHERE s2.LINE_NAME = (
		                SELECT LINE_NAME FROM (
		                    SELECT s.LINE_NAME
		                    FROM STATION s
		                    ORDER BY POWER(s.LATITUDE - #{latitude}, 2) + POWER(s.LONGITDE - #{longitude}, 2)
		                ) WHERE ROWNUM = 1
		            )
		        )
		  )
		ORDER BY (p.UPDATE_TIME - NUMTODSINTERVAL(p.PD_RANK, 'DAY')) DESC
	</select>
	
	<!-- 키워드 + 카테고리 동시 검색 -->
	<select id="bothSelectProducts" resultMap="productResultMap" resultType="Product">
	    SELECT 
		    p.USER_NO,
		    p.PD_NUM,
		    p.PD_TITLE,
		    p.PD_BOARD,
		    p.PD_PRICE,
		    p.LATITUDE,
		    p.LONGITUDE,
		    p.BIG_CATE,
		    p.MID_CATE,
		    p.SMALL_CATE,
		    p.UPDATE_TIME,
		    p.PD_RANK,
		    p.PD_STATUS,
		    p.IS_SUB,
		    pd.pd_url
		FROM Product p
		LEFT JOIN pd_file pd 
		    ON p.user_no = pd.user_no 
		    AND p.pd_num = pd.pd_num
		WHERE (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL)
		  AND (
		      (p.PD_TITLE LIKE '%' || #{keyword, jdbcType=VARCHAR} || '%' 
		       OR p.PD_BOARD LIKE '%' || #{keyword, jdbcType=VARCHAR} || '%')
		      AND (
		          p.BIG_CATE LIKE '%' || #{category, jdbcType=VARCHAR} || '%'
		          OR p.MID_CATE LIKE '%' || #{category, jdbcType=VARCHAR} || '%'
		          OR p.SMALL_CATE LIKE '%' || #{category, jdbcType=VARCHAR} || '%'
		      )
		  )
		  AND EXISTS (
		      SELECT 1
		      FROM TRADE_STATION ts
		      WHERE ts.USER_NO = p.USER_NO
		        AND ts.PD_NUM = p.PD_NUM
		        AND ts.STATION_NUM IN (
		            SELECT s2.STATION_NUM
		            FROM STATION s2
		            WHERE s2.LINE_NAME = (
		                SELECT LINE_NAME FROM (
		                    SELECT s.LINE_NAME
		                    FROM STATION s
		                    ORDER BY POWER(s.LATITUDE - #{latitude}, 2) + POWER(s.LONGITDE - #{longitude}, 2)
		                ) WHERE ROWNUM = 1
		            )
		        )
		  )
		ORDER BY (p.UPDATE_TIME - NUMTODSINTERVAL(p.PD_RANK, 'DAY')) DESC

	</select>



	<select id="selectOneProduct" resultMap="productResultMap" resultType="Product">
	    SELECT 
	        p.USER_NO,
	        p.PD_NUM,
	        p.PD_TITLE,
	        p.PD_BOARD,
	        p.PD_PRICE,
	        p.LATITUDE,
	        p.LONGITUDE,
	        p.BIG_CATE,
	        p.MID_CATE,
	        p.SMALL_CATE,
	        p.UPDATE_TIME,
	        p.PD_RANK,
	        p.PD_STATUS,
	        p.IS_SUB,
	        pd.pd_url
	    FROM Product p
			LEFT JOIN pd_file pd 
				ON p.user_no = pd.user_no 
				AND p.pd_num = pd.pd_num
		WHERE p.PD_NUM = #{pdNum} AND p.USER_NO = #{userNo} AND (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL) 
	</select>
	
	<select id="selectFileList" resultType="string">
	    SELECT PD_URL
	    FROM PD_FILE
		WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo}
	</select>
	
	<insert id="insertProduct" parameterType="Product" useGeneratedKeys="true" keyProperty="pdNum">
	    <!-- 먼저 시퀀스로 pdNum 값을 설정 -->
	    <selectKey keyProperty="pdNum" resultType="int" order="BEFORE">
	        SELECT PRODUCT_SEQ.NEXTVAL FROM DUAL
	    </selectKey>
	    INSERT INTO PRODUCT (
	        USER_NO,
	        PD_NUM,
	        PD_TITLE,
	        PD_BOARD,
	        PD_PRICE,
	        LATITUDE,
	        LONGITUDE,
	        BIG_CATE,
	        MID_CATE,
	        SMALL_CATE,
	        UPDATE_TIME,
	        PD_RANK,
	        IS_SUB
	    ) VALUES (
	        #{userNo},
	        #{pdNum},
	        #{pdTitle},
	        #{pdBoard},
	        #{pdPrice},
	        #{latitude},
	        #{longitude},
	        #{bigCate},
	        #{midCate},
	        #{smallCate},
	        SYSDATE,
	        #{pdRank},
	        'Y'
	    )
	</insert>
	<insert id="insertProductFile" parameterType="PdFile" useGeneratedKeys="true">
	    INSERT INTO PD_FILE (
	        USER_NO,
	        PD_NUM,
	        PD_URL,
	        FILETYPE,
	        ISTHUMBNAIL,
	        IS_SUB,
	        FILE_NO
	    ) VALUES (
	        #{userNo},
	        #{pdNum},
	        #{pdUrl},
	        #{fileType},
	        #{isThumbnail},
	        #{isSub},
	        #{fileNo}
	    )
	</insert>
	

	<!--  상품 파일 삭제 -->
	<delete id="deleteProductFilesByPdNumUserNo">
	    DELETE FROM PD_FILE
	    WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo}
	</delete>
	
	<!-- 상품 자체 삭제 -->
	<delete id="deleteProductByPdNumUserNo">
	    DELETE FROM PRODUCT
	    WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo}
	</delete>
	
	<select id="editProduct" resultMap="productResultMap" parameterType="int">
	    SELECT 
	        p.USER_NO,
	        p.PD_NUM,
	        p.PD_TITLE,
	        p.PD_BOARD,
	        p.PD_PRICE,
	        p.LATITUDE,
	        p.LONGITUDE,
	        p.BIG_CATE,
	        p.MID_CATE,
	        p.SMALL_CATE,
	        p.UPDATE_TIME,
	        p.PD_RANK,
	        p.PD_STATUS,
	        p.IS_SUB,
	        pd.pd_url
	    FROM Product p
		LEFT JOIN pd_file pd 
			ON p.user_no = pd.user_no 
			AND p.pd_num = pd.pd_num
	    WHERE p.PD_NUM = #{pdNum} AND (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL)
	</select>

	<insert id="insertPdStation">
		INSERT INTO TRADE_STATION (
			USER_NO,
			PD_NUM,
			STATION_NUM
		) VALUES (
			#{userNo},
			#{pdNum},
			#{stationNo}
		)
	</insert>
	
	<select id="selectFavoriteList" parameterType="Product" resultMap="productResultMap">
		SELECT 
		    p.USER_NO,
	        p.PD_NUM,
	        p.PD_TITLE,
	        p.PD_BOARD,
	        p.PD_PRICE,
	        p.LATITUDE,
	        p.LONGITUDE,
	        p.BIG_CATE,
	        p.MID_CATE,
	        p.SMALL_CATE,
	        p.UPDATE_TIME,
	        p.PD_RANK,
	        p.PD_STATUS,
	        p.IS_SUB,
	        PF.pd_url
		FROM PRODUCT P
		JOIN FAVORITE F ON P.PD_NUM = F.PD_NUM
		LEFT JOIN (
		    SELECT USER_NO, PD_NUM, PD_URL
		    FROM PD_FILE
		    WHERE ISTHUMBNAIL = 'Y'
		) PF ON P.USER_NO = PF.USER_NO AND P.PD_NUM = PF.PD_NUM
		WHERE F.USER_NO = #{userNo}
	</select>
	
	<select id="selectMyPdList" parameterType="Product" resultMap="productResultMap">
	    SELECT 
	        p.USER_NO,
	        p.PD_NUM,
	        p.PD_TITLE,
	        p.PD_BOARD,
	        p.PD_PRICE,
	        p.LATITUDE,
	        p.LONGITUDE,
	        p.BIG_CATE,
	        p.MID_CATE,
	        p.SMALL_CATE,
	        p.UPDATE_TIME,
	        p.PD_RANK,
	        p.PD_STATUS,
	        p.IS_SUB,
	        pd.pd_url
	    FROM Product p
			LEFT JOIN pd_file pd 
				ON p.user_no = pd.user_no 
				AND p.pd_num = pd.pd_num
		WHERE (pd.ISTHUMBNAIL = 'Y' OR pd.ISTHUMBNAIL IS NULL) AND p.USER_NO = #{userNo} 
		ORDER BY p.update_time DESC
	</select>
	
	<select id="checkPdEnroll" resultType="string">
	    SELECT 
	        CASE
	            WHEN EXISTS (
	                SELECT 1 FROM TRADE_ENROLL 
	                WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo} AND STATUS = '판매완료'
	            ) THEN '판매완료'
	            WHEN EXISTS (
	                SELECT 1 FROM TRADE_ENROLL 
	                WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo} AND STATUS = '예약중'
	            ) THEN '예약중'
	            ELSE '판매중'
	        END
	    FROM DUAL
	</select>

	
	<select id="checkEnroll" resultType="string">
		SELECT STATUS  
		FROM TRADE_ENROLL
		WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo}
	</select>
	
	<select id="checkMyEnroll" resultType="string">
<!-- 		SELECT STATUS  
		FROM TRADE_ENROLL
		WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo} AND ENROLL_NUM = #{enrollNo} -->
		SELECT 
		    CASE 
		        WHEN EXISTS (
		            SELECT 1 FROM TRADE_ENROLL 
		            WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo} AND STATUS = '판매완료'
		        ) THEN '판매완료'
		        WHEN EXISTS (
		            SELECT 1 FROM TRADE_ENROLL 
		            WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo} AND STATUS = '예약중'
		        ) THEN '예약중'
		        WHEN EXISTS (
		            SELECT 1 FROM TRADE_ENROLL 
		            WHERE PD_NUM = #{pdNum} AND USER_NO = #{userNo} AND ENROLL_NUM = #{enrollNo} AND STATUS = '거래신청'
		        ) THEN '거래신청'
		        ELSE '판매중'
		    END AS STATUS
		FROM DUAL		
	</select>
	
	<insert id="tradeEnroll">
		INSERT INTO TRADE_ENROLL 
		(PD_NUM, USER_NO
		,ENROLL_NUM, STATUS) VALUES
		(#{pdNum}, #{userNo}, #{enrollNo}, #{status})
	</insert>

	<select id="selectHistoryList" resultMap="productResultMap">
	    SELECT 
	        P.USER_NO,
	        P.PD_NUM,
	        P.PD_TITLE,
	        P.PD_BOARD,
	        P.PD_PRICE,
	        P.LATITUDE,
	        P.LONGITUDE,
	        P.BIG_CATE,
	        P.MID_CATE,
	        P.SMALL_CATE,
	        P.UPDATE_TIME,
	        P.PD_RANK,
	        P.PD_STATUS,
	        P.IS_SUB,
	        PF.PD_URL
	    FROM PRODUCT P
	    LEFT JOIN (
	        SELECT USER_NO, PD_NUM, PD_URL
	        FROM PD_FILE
	        WHERE ISTHUMBNAIL = 'Y'
	    ) PF ON P.USER_NO = PF.USER_NO AND P.PD_NUM = PF.PD_NUM
	    WHERE (P.USER_NO, P.PD_NUM) IN (
	        SELECT T.USER_NO, T.PD_NUM
	        FROM TRADE_ENROLL T
	        WHERE T.USER_NO = #{userNo}
	          AND T.STATUS = #{status}
	          
	          <if test="status == '거래신청'">
	              AND NOT EXISTS (
	                  SELECT 1
	                  FROM TRADE_ENROLL T2
	                  WHERE T2.USER_NO = T.USER_NO
	                    AND T2.PD_NUM = T.PD_NUM
	                    AND T2.STATUS IN ('예약중', '판매완료')
	              )
	          </if>
	    )
	</select>
	
	<select id="selectMyHistoryList" resultMap="productResultMap">
	    SELECT 
	        P.USER_NO,
	        P.PD_NUM,
	        P.PD_TITLE,
	        P.PD_BOARD,
	        P.PD_PRICE,
	        P.LATITUDE,
	        P.LONGITUDE,
	        P.BIG_CATE,
	        P.MID_CATE,
	        P.SMALL_CATE,
	        P.UPDATE_TIME,
	        P.PD_RANK,
	        P.PD_STATUS,
	        P.IS_SUB,
	        PF.PD_URL
	    FROM PRODUCT P
	    LEFT JOIN (
	        SELECT USER_NO, PD_NUM, PD_URL
	        FROM PD_FILE
	        WHERE ISTHUMBNAIL = 'Y'
	    ) PF ON P.USER_NO = PF.USER_NO AND P.PD_NUM = PF.PD_NUM
	    WHERE (P.USER_NO, P.PD_NUM) IN (
	        SELECT T.USER_NO, T.PD_NUM
	        FROM TRADE_ENROLL T
	        WHERE T.ENROLL_NUM = #{userNo}
	          AND T.STATUS = #{status}
	          
	          <if test="status == '거래신청'">
	              AND NOT EXISTS (
	                  SELECT 1
	                  FROM TRADE_ENROLL T2
	                  WHERE T2.USER_NO = T.USER_NO
	                    AND T2.PD_NUM = T.PD_NUM
	                    AND T2.STATUS IN ('예약중', '판매완료')
	              )
	          </if>
	    )
	</select>
	
	<update id="selectHistoryUpdate">
		UPDATE TRADE_ENROLL
	    SET STATUS = #{status}
		WHERE PD_NUM = #{pdNum}
		  AND USER_NO = #{userNo}
		  AND ENROLL_NUM = #{enrollNo}
	</update>

<!-- 	담구기 -->
	 <update id="updateProductRank" parameterType="map">
        UPDATE PRODUCT
        SET PD_RANK = PD_RANK + #{rankChange}
        WHERE PD_NUM = #{pdNum}
    </update>
</mapper>